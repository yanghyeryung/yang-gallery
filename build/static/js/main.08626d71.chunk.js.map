{"version":3,"sources":["views/Login.js","views/List.js","App.js","serviceWorker.js","index.js"],"names":["Login","props","login","bind","id","this","refs","value","database","firebase","history","ref","once","then","user","userVal","val","pwd","Cookies","set","push","alert","className","placeholder","type","onClick","React","Component","List","App","exact","path","component","render","get","to","Boolean","window","location","hostname","match","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"mRAsCeA,E,kDAjCX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,EAAKA,MAAMC,KAAX,gBAHE,E,oDAMV,IAAD,OACEC,EAAKC,KAAKC,KAAKF,GAAGG,MAClBC,EAAWC,aACVC,EAAWL,KAAKJ,MAAhBS,QACPF,EAASG,IAAI,QAAUP,GAAIQ,KAAK,SAASC,MAAK,SAACC,GAC3C,IAAIC,EAAUD,EAAKE,MAEfD,GAAWA,EAAQX,KAAOA,GAAMW,EAAQE,MAAQ,EAAKX,KAAKW,IAAIV,OAC9DW,IAAQC,IAAI,YAAaJ,EAAQX,IACjCM,EAAQU,KAAK,MAEbC,MAAM,yC,+BAMd,OACI,yBAAKC,UAAU,cACX,2BAAOX,IAAI,KAAKY,YAAY,KAAKC,KAAK,SACtC,2BAAOb,IAAI,MAAMY,YAAY,MAAMC,KAAK,aACxC,4BAAQC,QAASpB,KAAKH,OAAtB,c,GA5BIwB,IAAMC,WCkBXC,E,kDAnBX,WAAY3B,GAAQ,uCACVA,G,qDAON,OACI,yBAAKqB,UAAU,aACX,4BAAQG,QAASpB,KAAKH,OAAtB,KACA,yC,GAZGwB,IAAMC,WCoBVE,MAff,WACE,OACE,yBAAKP,UAAU,YACX,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOQ,OAAK,EAACC,KAAK,SAASC,UAAWhC,IACtC,kBAAC,IAAD,CAAOiC,OAAQ,kBACXf,IAAQgB,IAAI,aAAe,kBAAC,EAAD,MAAW,kBAAC,IAAD,CAAUC,GAAG,kBCFnDC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCFN/B,gBATqB,CACjBgC,OAAQ,0CACRC,WAAY,+BACZC,YAAa,sCACbC,UAAW,eACXC,cAAe,2BACfC,kBAAmB,gBACnBC,MAAO,+CAKXC,IAASf,OACL,kBAAC,IAAMgB,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SD4GtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzC,MAAK,SAAA0C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.08626d71.chunk.js","sourcesContent":["import React from 'react';\nimport * as firebase from 'firebase';\nimport Cookies from 'js-cookie';\n\nclass Login extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.login = this.login.bind(this);\n    }\n\n    login() {\n        const id = this.refs.id.value;\n        const database = firebase.database();\n        const {history} = this.props;\n        database.ref('user/' + id).once('value').then((user) => {\n            let userVal = user.val();\n\n            if (userVal && userVal.id === id && userVal.pwd === this.refs.pwd.value) {\n                Cookies.set('authToken', userVal.id);\n                history.push(\"/\");\n            }else {\n                alert('로그인 실패!');\n            }\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"login-view\">\n                <input ref=\"id\" placeholder=\"id\" type=\"text\"/>\n                <input ref=\"pwd\" placeholder=\"pwd\" type=\"password\"/>\n                <button onClick={this.login}>login</button>\n            </div>\n        );\n    }\n}\n\nexport default Login;\n","import React from 'react';\n\nclass List extends React.Component {\n    constructor(props) {\n        super(props);\n\n        //this.add = this.add.bind(this);\n    }\n\n\n    render() {\n        return (\n            <div className=\"list-view\">\n                <button onClick={this.login}>+</button>\n                <ul>\n                    List\n                </ul>\n            </div>\n        );\n    }\n}\n\nexport default List;\n","import React from 'react';\nimport {HashRouter as Router, Route, Switch, Redirect} from 'react-router-dom';\nimport Cookies from 'js-cookie';\nimport Login from './views/Login';\nimport List from './views/List';\n\n\nfunction App() {\n  return (\n    <div className=\"app-view\">\n        <Router>\n            <Switch>\n                <Route exact path='/login' component={Login} />\n                <Route render={() => (\n                    Cookies.get('authToken') ? <List /> : <Redirect to='/login'/>\n                )}/>\n            </Switch>\n        </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport * as firebase from 'firebase';\n\n// firebase setting\nlet firebaseConfig = {\n    apiKey: \"AIzaSyANJcTL5OSYVkWhJ2x1on4w242qq_AcqRY\",\n    authDomain: \"yang-gallery.firebaseapp.com\",\n    databaseURL: \"https://yang-gallery.firebaseio.com\",\n    projectId: \"yang-gallery\",\n    storageBucket: \"yang-gallery.appspot.com\",\n    messagingSenderId: \"1054961998752\",\n    appId: \"1:1054961998752:web:754a332c24ff3c244f22c5\"\n};\nfirebase.initializeApp(firebaseConfig);\n\n// render\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}