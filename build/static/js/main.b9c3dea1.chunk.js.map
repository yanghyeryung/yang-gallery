{"version":3,"sources":["views/Login.js","views/Gallery.js","views/GuestBook.js","views/Main.js","App.js","serviceWorker.js","index.js"],"names":["Login","props","login","bind","id","this","refs","value","database","firebase","history","ref","once","then","user","userVal","val","pwd","Cookies","set","push","alert","className","placeholder","type","onClick","React","Component","Gallery","state","arts","detail","editMode","add","edit","delete","save","changeDetail","on","artMap","forEach","art","artVal","key","title","image","desc","date","setState","off","e","currentTarget","getAttribute","Object","assign","remove","catch","preventDefault","moment","format","target","name","artHtmlList","hasOwnProperty","data-key","onChange","GuestBook","Main","activeTabMode","changeMode","mode","data-mode","App","exact","path","component","render","get","to","Boolean","window","location","hostname","match","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"kRAuCeA,E,kDAlCX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,EAAKA,MAAMC,KAAX,gBAHE,E,oDAMV,IAAD,OACEC,EAAKC,KAAKC,KAAKF,GAAGG,MAClBC,EAAWC,aACVC,EAAWL,KAAKJ,MAAhBS,QAEPF,EAASG,IAAI,QAAUP,GAAIQ,KAAK,SAASC,MAAK,SAACC,GAC3C,IAAIC,EAAUD,EAAKE,MAEfD,GAAWA,EAAQX,KAAOA,GAAMW,EAAQE,MAAQ,EAAKX,KAAKW,IAAIV,OAC9DW,IAAQC,IAAI,YAAaJ,EAAQX,IACjCM,EAAQU,KAAK,MAEbC,MAAM,yC,+BAMd,OACI,yBAAKC,UAAU,cACX,2BAAOX,IAAI,KAAKY,YAAY,KAAKC,KAAK,SACtC,2BAAOb,IAAI,MAAMY,YAAY,MAAMC,KAAK,aACxC,4BAAQC,QAASpB,KAAKH,OAAtB,c,GA7BIwB,IAAMC,W,yBCiKXC,E,kDAhKX,WAAY3B,GAAQ,IAAD,8BACf,cAAMA,IAED4B,MAAQ,CACTC,KAAM,GACNC,OAAQ,GACRC,UAAU,GAGd,EAAKxB,SAAWC,aAEhB,EAAKwB,IAAM,EAAKA,IAAI9B,KAAT,gBACX,EAAK+B,KAAO,EAAKA,KAAK/B,KAAV,gBACZ,EAAKgC,OAAS,EAAKA,OAAOhC,KAAZ,gBACd,EAAKiC,KAAO,EAAKA,KAAKjC,KAAV,gBACZ,EAAKkC,aAAe,EAAKA,aAAalC,KAAlB,gBAfL,E,iEAkBG,IAAD,OACjBE,KAAKG,SAASG,IAAI,OAAO2B,GAAG,SAAS,SAACR,GAClC,IAAIS,EAAS,GAEbT,EAAKU,SAAQ,SAACC,GACV,IAAMC,EAASD,EAAIzB,MAEnBuB,EAAOE,EAAIE,KAAO,CACdA,IAAKF,EAAIE,IACTC,MAAOF,EAAOE,MACdC,MAAOH,EAAOG,MACdC,KAAMJ,EAAOI,KACbC,KAAML,EAAOK,SAIrB,EAAKC,SAAS,CACVlB,KAAMS,S,6CAMdlC,KAAKG,SAASG,IAAI,OAAOsC,IAAI,W,4BAI7B5C,KAAK2C,SAAS,CACVhB,UAAU,EACVD,OAAQ,O,2BAIXmB,GACD,IAAIP,EAAMO,EAAEC,cAAcC,aAAa,YAEvC/C,KAAK2C,SAAS,CACVhB,UAAU,EACVD,OAAQsB,OAAOC,OAAO,GAAIjD,KAAKwB,MAAMC,KAAKa,Q,6BAI3CO,GACH,IAAIP,EAAMO,EAAEC,cAAcC,aAAa,YAEvC/C,KAAKG,SAASG,IAAI,OAASgC,GAAKY,SAC3B1C,MAAK,WACFQ,MAAM,gCAETmC,OAAM,WACHnC,MAAM,kC,2BAIb6B,GAAI,IAAD,OACJA,EAAEO,iBAEF,IAAI1B,EAASsB,OAAOC,OAAO,CAACP,KAAMW,MAASC,OAAO,eAAgBtD,KAAKwB,MAAME,QAE7E,GAAIA,EAAOY,IAEPtC,KAAKG,SAASG,IAAI,OAASoB,EAAOY,KAAKxB,IAAIY,GACtClB,MAAK,WACFQ,MAAM,6BACN,EAAK2B,SAAS,CACVhB,UAAU,OAGjBwB,OAAM,WACHnC,MAAM,oCAEX,CAEHU,EAAOY,IAAMtC,KAAKwB,MAAME,OAAOa,MAAQ,IAAMc,MAASC,OAAO,kBAE7D,IAAI7B,EAAOuB,OAAOC,OAAPD,OAAA,IAAAA,CAAA,GAAgBtB,EAAOY,IAAMZ,GAAS1B,KAAKwB,MAAMC,MAC5DzB,KAAKG,SAASG,IAAI,OAAOQ,IAAIW,GACxBjB,MAAK,WACFQ,MAAM,6BACN,EAAK2B,SAAS,CACVhB,UAAU,OAGjBwB,OAAM,WACHnC,MAAM,mC,mCAKT6B,GACT7C,KAAK2C,SAAS,CACVjB,OAAQsB,OAAOC,OAAO,GAAIjD,KAAKwB,MAAME,OAA7BsB,OAAA,IAAAA,CAAA,GAAuCH,EAAEU,OAAOC,KAAOX,EAAEU,OAAOrD,Y,+BAK5E,IAAIuD,EAAc,GAElB,IAAK,IAAInB,KAAOtC,KAAKwB,MAAMC,KACvB,GAAIzB,KAAKwB,MAAMC,KAAKiC,eAAepB,GAAM,CACrC,IAAIF,EAAMpC,KAAKwB,MAAMC,KAAKa,GAE1BmB,EAAY1C,KAAK,4BACb,yBAAKE,UAAU,SAASmB,EAAIG,OAC5B,yBAAKtB,UAAU,SAASmB,EAAII,OAC5B,yBAAKvB,UAAU,QAAQmB,EAAIK,MAC3B,yBAAKxB,UAAU,QAAQmB,EAAIM,MAC3B,4BAAQtB,QAASpB,KAAK6B,KAAM8B,WAAUrB,GAAtC,QACA,4BAAQlB,QAASpB,KAAK8B,OAAQ6B,WAAUrB,GAAxC,YAIZ,OACI,yBAAKrB,UAAU,iBACTjB,KAAKwB,MAAMG,UAAY,4BAAQV,UAAU,MAAMG,QAASpB,KAAK4B,KAAtC,KAErB5B,KAAKwB,MAAMG,SACP,8BACI,yBAAKV,UAAU,aACX,wCACA,2BAAOuC,KAAK,QAAQtD,MAAOF,KAAKwB,MAAME,OAAOa,MAAOqB,SAAU5D,KAAKgC,gBAEvE,yBAAKf,UAAU,aACX,wCACA,2BAAOuC,KAAK,QAAQtD,MAAOF,KAAKwB,MAAME,OAAOc,MAAOoB,SAAU5D,KAAKgC,gBAEvE,yBAAKf,UAAU,aACX,uCACA,2BAAOuC,KAAK,OAAOtD,MAAOF,KAAKwB,MAAME,OAAOe,KAAMmB,SAAU5D,KAAKgC,gBAErE,4BAAQZ,QAASpB,KAAK+B,MAAtB,SAGJ,4BACC0B,Q,GAzJHpC,IAAMC,WCabuC,E,kDAbX,WAAYjE,GAAQ,uCACVA,G,qDAIN,OACI,yBAAKqB,UAAU,mBAAf,iB,GAPYI,IAAMC,WCoCfwC,E,kDAjCX,WAAYlE,GAAQ,IAAD,8BACf,cAAMA,IAED4B,MAAQ,CACTuC,cAAe,WAGnB,EAAKC,WAAa,EAAKA,WAAWlE,KAAhB,gBAPH,E,uDAUR+C,GACP,IAAIoB,EAAOpB,EAAEC,cAAcC,aAAa,aAExC/C,KAAK2C,SAAS,CACVoB,cAAeE,M,+BAKnB,OACI,yBAAKhD,UAAU,aACX,yBAAKA,UAAU,UACX,0BAAMA,UAAU,SAAhB,gBAEJ,4BAAQG,QAASpB,KAAKgE,WAAYE,YAAU,WAA5C,WACA,4BAAQ9C,QAASpB,KAAKgE,WAAYE,YAAU,aAA5C,aAC8B,YAA7BlE,KAAKwB,MAAMuC,eAA+B,kBAAC,EAAD,MACb,cAA7B/D,KAAKwB,MAAMuC,eAAiC,kBAAC,EAAD,W,GA5B1C1C,IAAMC,WCiBV6C,MAff,WACE,OACE,yBAAKlD,UAAU,YACX,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOmD,OAAK,EAACC,KAAK,SAASC,UAAW3E,IACtC,kBAAC,IAAD,CAAO4E,OAAQ,kBACX1D,IAAQ2D,IAAI,aAAe,kBAAC,EAAD,MAAW,kBAAC,IAAD,CAAUC,GAAG,kBCFnDC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCFN1E,gBATqB,CACjB2E,OAAQ,0CACRC,WAAY,+BACZC,YAAa,sCACbC,UAAW,eACXC,cAAe,2BACfC,kBAAmB,gBACnBC,MAAO,+CAKXC,IAASf,OACL,kBAAC,IAAMgB,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SD4GtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpF,MAAK,SAAAqF,GACJA,EAAaC,gBAEd3C,OAAM,SAAA4C,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b9c3dea1.chunk.js","sourcesContent":["import React from 'react';\nimport * as firebase from 'firebase';\nimport Cookies from 'js-cookie';\n\nclass Login extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.login = this.login.bind(this);\n    }\n\n    login() {\n        const id = this.refs.id.value;\n        const database = firebase.database();\n        const {history} = this.props;\n\n        database.ref('user/' + id).once('value').then((user) => {\n            let userVal = user.val();\n\n            if (userVal && userVal.id === id && userVal.pwd === this.refs.pwd.value) {\n                Cookies.set('authToken', userVal.id);\n                history.push(\"/\");\n            }else {\n                alert('로그인 실패!');\n            }\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"login-view\">\n                <input ref=\"id\" placeholder=\"id\" type=\"text\"/>\n                <input ref=\"pwd\" placeholder=\"pwd\" type=\"password\"/>\n                <button onClick={this.login}>login</button>\n            </div>\n        );\n    }\n}\n\nexport default Login;\n","import React from 'react';\nimport * as firebase from 'firebase';\nimport moment from 'moment';\n\nclass Gallery extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            arts: {},\n            detail: {},\n            editMode: false,\n        };\n\n        this.database = firebase.database();\n\n        this.add = this.add.bind(this);\n        this.edit = this.edit.bind(this);\n        this.delete = this.delete.bind(this);\n        this.save = this.save.bind(this);\n        this.changeDetail = this.changeDetail.bind(this);\n    }\n\n    componentWillMount() {\n        this.database.ref('art').on('value', (arts) => {\n            let artMap = {};\n\n            arts.forEach((art) => {\n                const artVal = art.val();\n\n                artMap[art.key] = {\n                    key: art.key,\n                    title: artVal.title,\n                    image: artVal.image,\n                    desc: artVal.desc,\n                    date: artVal.date,\n                };\n            });\n\n            this.setState({\n                arts: artMap,\n            });\n        });\n    }\n\n    componentWillUnmount() {\n        this.database.ref('art').off('value');\n    }\n\n    add() {\n        this.setState({\n            editMode: true,\n            detail: {},\n        });\n    }\n\n    edit(e) {\n        let key = e.currentTarget.getAttribute('data-key');\n\n        this.setState({\n            editMode: true,\n            detail: Object.assign({}, this.state.arts[key]),\n        });\n    }\n\n    delete(e) {\n        let key = e.currentTarget.getAttribute('data-key');\n\n        this.database.ref('art/' + key).remove()\n            .then(() => {\n                alert('삭제 성공');\n            })\n            .catch(() => {\n                alert('삭제 실패');\n            });\n    }\n\n    save(e) {\n        e.preventDefault();\n\n        let detail = Object.assign({date: moment().format('YYYY/MM/DD')}, this.state.detail);\n\n        if (detail.key) {\n            // 수정\n            this.database.ref('art/' + detail.key).set(detail)\n                .then(() => {\n                    alert('수정 성공');\n                    this.setState({\n                        editMode: false,\n                    });\n                })\n                .catch(() => {\n                    alert('수정 실패');\n                });\n        } else {\n            // 추가\n            detail.key = this.state.detail.title + '-' + moment().format('YYYYMMDDhhmmss');\n\n            let arts = Object.assign({[detail.key]: detail}, this.state.arts);\n            this.database.ref('art').set(arts)\n                .then(() => {\n                    alert('추가 성공');\n                    this.setState({\n                        editMode: false,\n                    });\n                })\n                .catch(() => {\n                    alert('추가 실패');\n                });\n        }\n    }\n\n    changeDetail(e) {\n        this.setState({\n            detail: Object.assign({}, this.state.detail, {[e.target.name]: e.target.value}),\n        });\n    }\n\n    render() {\n        let artHtmlList = [];\n\n        for (let key in this.state.arts) {\n            if (this.state.arts.hasOwnProperty(key)) {\n                let art = this.state.arts[key];\n\n                artHtmlList.push(<li>\n                    <div className=\"title\">{art.title}</div>\n                    <div className=\"image\">{art.image}</div>\n                    <div className=\"desc\">{art.desc}</div>\n                    <div className=\"date\">{art.date}</div>\n                    <button onClick={this.edit} data-key={key}>edit</button>\n                    <button onClick={this.delete} data-key={key}>delete</button>\n                </li>);\n            }\n        }\n        return (\n            <div className=\"gallery-view\">\n                {!this.state.editMode && <button className=\"btn\" onClick={this.add}>+</button>}\n                {\n                    this.state.editMode ?\n                        <form>\n                            <div className=\"form-item\">\n                                <label>title</label>\n                                <input name=\"title\" value={this.state.detail.title} onChange={this.changeDetail}/>\n                            </div>\n                            <div className=\"form-item\">\n                                <label>image</label>\n                                <input name=\"image\" value={this.state.detail.image} onChange={this.changeDetail}/>\n                            </div>\n                            <div className=\"form-item\">\n                                <label>desc</label>\n                                <input name=\"desc\" value={this.state.detail.desc} onChange={this.changeDetail}/>\n                            </div>\n                            <button onClick={this.save}>save</button>\n                        </form>\n                        :\n                        <ul>\n                        {artHtmlList}\n                    </ul>\n                }\n            </div>\n        );\n    }\n}\n\nexport default Gallery;\n","import React from 'react';\nimport * as firebase from 'firebase';\n\nclass GuestBook extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div className=\"guest-book-view\">\n                GuestBook\n            </div>\n        );\n    }\n}\n\nexport default GuestBook;\n","import React from 'react';\nimport * as firebase from 'firebase';\nimport Gallery from './Gallery';\nimport GuestBook from './GuestBook';\n\nclass Main extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            activeTabMode: 'gallery',\n        };\n\n        this.changeMode = this.changeMode.bind(this);\n    }\n\n    changeMode(e) {\n        let mode = e.currentTarget.getAttribute('data-mode');\n\n        this.setState({\n            activeTabMode: mode,\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"main-view\">\n                <div className=\"header\">\n                    <span className=\"title\">YangGallery</span>\n                </div>\n                <button onClick={this.changeMode} data-mode=\"gallery\">Gallery</button>\n                <button onClick={this.changeMode} data-mode=\"guestbook\">GuestBook</button>\n                {this.state.activeTabMode === 'gallery' && <Gallery />}\n                {this.state.activeTabMode === 'guestbook' && <GuestBook />}\n            </div>\n        );\n    }\n}\n\nexport default Main;\n","import React from 'react';\nimport {HashRouter as Router, Route, Switch, Redirect} from 'react-router-dom';\nimport Cookies from 'js-cookie';\nimport Login from './views/Login';\nimport Main from './views/Main';\n\n\nfunction App() {\n  return (\n    <div className=\"app-view\">\n        <Router>\n            <Switch>\n                <Route exact path='/login' component={Login} />\n                <Route render={() => (\n                    Cookies.get('authToken') ? <Main /> : <Redirect to='/login'/>\n                )}/>\n            </Switch>\n        </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport * as firebase from 'firebase';\n\n// firebase setting\nlet firebaseConfig = {\n    apiKey: \"AIzaSyANJcTL5OSYVkWhJ2x1on4w242qq_AcqRY\",\n    authDomain: \"yang-gallery.firebaseapp.com\",\n    databaseURL: \"https://yang-gallery.firebaseio.com\",\n    projectId: \"yang-gallery\",\n    storageBucket: \"yang-gallery.appspot.com\",\n    messagingSenderId: \"1054961998752\",\n    appId: \"1:1054961998752:web:754a332c24ff3c244f22c5\"\n};\nfirebase.initializeApp(firebaseConfig);\n\n// render\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}